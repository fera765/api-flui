import { test, expect } from '../fixtures/console-capture';
import { MCPLogAnalyzer, MCPPageHelper } from '../fixtures/mcp-helpers';

test.describe('PASSO 3: Fluxo Completo com Linker', () => {
  test.setTimeout(180000); // 3 minutos
  
  test('deve criar workflow completo com trigger + tools + linker + save', async ({ pageWithLogging, capturedLogs }) => {
    const helper = new MCPPageHelper(pageWithLogging);
    
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üéØ PASSO 3: FLUXO COMPLETO COM LINKER');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('');
    
    const automationName = `Complete Linker Flow ${Date.now()}`;
    
    // ==================================================
    // ETAPA 1: Criar Automa√ß√£o com Webhook Trigger
    // ==================================================
    console.log('üìç ETAPA 1: Criando automa√ß√£o com Webhook Trigger');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    await pageWithLogging.goto('http://localhost:8080/automations');
    await helper.waitForAppReady();
    
    await pageWithLogging.click('button:has-text("Criar Automa√ß√£o")');
    await pageWithLogging.waitForTimeout(1000);
    await pageWithLogging.fill('#name', automationName);
    await pageWithLogging.fill('#description', 'Teste completo de linker entre nodes');
    await pageWithLogging.click('button:has-text("Pr√≥ximo")');
    await pageWithLogging.waitForTimeout(3000);
    
    console.log(`‚úÖ Automa√ß√£o "${automationName}" criada`);
    
    // Adicionar Webhook Trigger
    await pageWithLogging.click('button:has-text("Trigger")');
    await pageWithLogging.waitForTimeout(1500);
    await pageWithLogging.click('text=WebHookTrigger');
    await pageWithLogging.waitForTimeout(2500);
    
    console.log('‚úÖ WebHookTrigger adicionado');
    await helper.captureScreenshot('step3-01-trigger-added');
    
    // ==================================================
    // ETAPA 2: Configurar Webhook com Outputs
    // ==================================================
    console.log('\nüìç ETAPA 2: Configurando webhook com campos de output');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    const configButtons = await pageWithLogging.$$('button:has-text("Config")');
    if (configButtons.length > 0) {
      await configButtons[0].click();
      await pageWithLogging.waitForTimeout(2000);
      
      console.log('‚úÖ Modal de config do webhook aberto');
      
      // Adicionar campos que ser√£o outputs
      const addFieldBtn = await pageWithLogging.$('button:has-text("Adicionar Campo")');
      
      if (addFieldBtn) {
        // Campo 1: filename (string)
        console.log('   Adicionando campo "filename" (string)...');
        await addFieldBtn.click();
        await pageWithLogging.waitForTimeout(800);
        
        const inputs = await pageWithLogging.$$('[role="dialog"] input[placeholder*="ex:"]');
        if (inputs.length > 0) {
          await inputs[inputs.length - 1].fill('filename');
          await pageWithLogging.waitForTimeout(500);
          console.log('   ‚úÖ Campo "filename" adicionado');
        }
        
        // Campo 2: content (string)
        console.log('   Adicionando campo "content" (string)...');
        await addFieldBtn.click();
        await pageWithLogging.waitForTimeout(800);
        
        const inputs2 = await pageWithLogging.$$('[role="dialog"] input[placeholder*="ex:"]');
        if (inputs2.length > 1) {
          await inputs2[inputs2.length - 1].fill('content');
          await pageWithLogging.waitForTimeout(500);
          console.log('   ‚úÖ Campo "content" adicionado');
        }
      }
      
      await helper.captureScreenshot('step3-02-webhook-with-fields');
      
      // Salvar webhook
      const saveBtn = await pageWithLogging.$('[role="dialog"] button:has-text("Salvar")');
      if (saveBtn) {
        await saveBtn.click();
        await pageWithLogging.waitForTimeout(1500);
        console.log('‚úÖ Webhook configurado com 2 campos de output');
      }
    }
    
    // ==================================================
    // ETAPA 3: Adicionar Tool (WriteFile)
    // ==================================================
    console.log('\nüìç ETAPA 3: Adicionando WriteFile tool');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    const addToolBtns = await pageWithLogging.$$('button');
    for (const btn of addToolBtns) {
      const text = await btn.textContent();
      if (text && text.toLowerCase().includes('adicionar tool')) {
        await btn.click();
        break;
      }
    }
    await pageWithLogging.waitForTimeout(1500);
    
    const search = await pageWithLogging.$('input[type="search"]');
    if (search) {
      await search.fill('writefile');
      await pageWithLogging.waitForTimeout(1000);
    }
    
    await pageWithLogging.click('text=WriteFile');
    await pageWithLogging.waitForTimeout(2500);
    
    console.log('‚úÖ WriteFile tool adicionada');
    await helper.captureScreenshot('step3-03-writefile-added');
    
    const nodes = await pageWithLogging.$$('.react-flow__node');
    console.log(`üìä Total de nodes no workflow: ${nodes.length}`);
    
    // ==================================================
    // ETAPA 4: Testar Linker com Outputs do Webhook
    // ==================================================
    console.log('\nüìç ETAPA 4: Testando linker com outputs do webhook');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    const errorsBeforeLinker = capturedLogs.errors.length;
    
    // Abrir config da WriteFile
    await pageWithLogging.waitForTimeout(1000);
    const configAgain = await pageWithLogging.$$('button:has-text("Config")');
    
    if (configAgain.length >= 2) {
      try {
        await configAgain[1].click({ timeout: 5000 });
        await pageWithLogging.waitForTimeout(2000);
      } catch (e) {
        await pageWithLogging.keyboard.press('Escape');
        await pageWithLogging.waitForTimeout(1000);
        await configAgain[1].click({ force: true });
        await pageWithLogging.waitForTimeout(2000);
      }
      
      console.log('‚úÖ Modal de WriteFile aberto');
      await helper.captureScreenshot('step3-04-writefile-modal');
      
      // Procurar bot√µes de linker
      console.log('\n   Procurando bot√µes de linker...');
      
      const linkerButtons = await pageWithLogging.$$('[role="dialog"] button[aria-label*="link"], [role="dialog"] button[title*="vincular"], [role="dialog"] button:has-text("Vincular")');
      console.log(`   üìä Bot√µes de linker encontrados: ${linkerButtons.length}`);
      
      if (linkerButtons.length > 0) {
        console.log('   ‚úÖ Bot√µes de linker dispon√≠veis!');
        
        // Clicar no primeiro bot√£o de linker
        console.log('   Tentando abrir popover de linker...');
        
        try {
          await linkerButtons[0].click();
          await pageWithLogging.waitForTimeout(1500);
          
          console.log('   ‚úÖ Popover de linker aberto');
          await helper.captureScreenshot('step3-05-linker-popover');
          
          // Verificar se h√° outputs dispon√≠veis
          const popoverText = await pageWithLogging.textContent('[role="dialog"], [data-radix-popover-content]');
          
          const hasFilename = popoverText?.includes('filename');
          const hasContent = popoverText?.includes('content');
          const hasWebhook = popoverText?.includes('WebHook') || popoverText?.includes('node');
          
          console.log(`\n   üìä Outputs dispon√≠veis no linker:`);
          console.log(`      - Cont√©m "filename": ${hasFilename ? '‚úÖ' : '‚ùå'}`);
          console.log(`      - Cont√©m "content": ${hasContent ? '‚úÖ' : '‚ùå'}`);
          console.log(`      - Refer√™ncia ao webhook: ${hasWebhook ? '‚úÖ' : '‚ùå'}`);
          
          if (hasFilename || hasContent) {
            console.log(`\n   üéâ LINKER FUNCIONANDO: Outputs do webhook dispon√≠veis!`);
            
            // Tentar selecionar um output
            const filenameOption = await pageWithLogging.$('text=filename');
            if (filenameOption) {
              await filenameOption.click();
              await pageWithLogging.waitForTimeout(1000);
              console.log(`   ‚úÖ Output "filename" selecionado via linker`);
              
              await helper.captureScreenshot('step3-06-output-selected');
            }
          } else {
            console.log(`\n   ‚ö†Ô∏è  Outputs do webhook n√£o aparecem no linker`);
            console.log(`   Conte√∫do do popover: ${popoverText?.substring(0, 200)}`);
          }
          
        } catch (e) {
          console.log(`   ‚ö†Ô∏è  Erro ao abrir linker: ${e.message}`);
        }
        
      } else {
        console.log('   ‚ö†Ô∏è  Nenhum bot√£o de linker encontrado');
        console.log('   Isso pode significar que:');
        console.log('   - Os campos n√£o suportam linker');
        console.log('   - O node anterior n√£o tem outputs');
        console.log('   - O UI n√£o renderizou os bot√µes');
      }
      
      // Fechar modal
      const cancelBtn = await pageWithLogging.$('[role="dialog"] button:has-text("Cancelar")');
      if (cancelBtn) {
        await cancelBtn.click();
        await pageWithLogging.waitForTimeout(1000);
      }
    }
    
    const errorsAfterLinker = capturedLogs.errors.length - errorsBeforeLinker;
    console.log(`\nüìä Erros durante teste de linker: ${errorsAfterLinker}`);
    
    // ==================================================
    // ETAPA 5: Salvar Automa√ß√£o
    // ==================================================
    console.log('\nüìç ETAPA 5: Salvando automa√ß√£o');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    const saveAutomationBtn = await pageWithLogging.$('button:has-text("Salvar")');
    if (saveAutomationBtn) {
      await saveAutomationBtn.click();
      await pageWithLogging.waitForTimeout(3000);
      console.log('‚úÖ Automa√ß√£o salva');
      
      await helper.captureScreenshot('step3-07-automation-saved');
      
      // Verificar toast de sucesso
      const toasts = await pageWithLogging.$$('[data-sonner-toast], [role="status"]');
      if (toasts.length > 0) {
        const toastText = await toasts[0].textContent();
        console.log(`üì¢ Toast: "${toastText}"`);
      }
    }
    
    // ==================================================
    // ETAPA 6: Verificar Persist√™ncia
    // ==================================================
    console.log('\nüìç ETAPA 6: Verificando persist√™ncia no backend');
    console.log('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ');
    
    const backendCheck = await pageWithLogging.evaluate(async (name) => {
      try {
        const res = await fetch('http://localhost:3001/api/automations');
        const data = await res.json();
        const found = data.find((a: any) => a.name === name);
        
        if (found) {
          return {
            success: true,
            nodes: found.nodes?.length || 0,
            links: found.links?.length || 0,
            hasWebhook: found.nodes?.some((n: any) => n.type === 'trigger'),
            hasWriteFile: found.nodes?.some((n: any) => n.referenceId),
          };
        }
        return { success: false };
      } catch (e) {
        return { success: false, error: e.message };
      }
    }, automationName);
    
    if (backendCheck.success) {
      console.log('‚úÖ Automa√ß√£o encontrada no backend');
      console.log(`   üìä Nodes: ${backendCheck.nodes}`);
      console.log(`   üìä Links: ${backendCheck.links}`);
      console.log(`   üìä Tem webhook: ${backendCheck.hasWebhook ? '‚úÖ' : '‚ùå'}`);
      console.log(`   üìä Tem WriteFile: ${backendCheck.hasWriteFile ? '‚úÖ' : '‚ùå'}`);
    } else {
      console.log('‚ö†Ô∏è  Automa√ß√£o n√£o encontrada no backend');
    }
    
    // ==================================================
    // AN√ÅLISE FINAL
    // ==================================================
    const analyzer = new MCPLogAnalyzer(capturedLogs);
    console.log('\n' + analyzer.generateReport());
    
    console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('üìä RESULTADO DO PASSO 3:');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log(`‚úÖ Automa√ß√£o criada com webhook trigger`);
    console.log(`‚úÖ Webhook configurado com 2 outputs`);
    console.log(`‚úÖ WriteFile tool adicionada`);
    console.log(`‚úÖ Linker testado`);
    console.log(`‚úÖ Automa√ß√£o salva`);
    console.log(`‚úÖ Persist√™ncia verificada`);
    
    const totalErrors = capturedLogs.errors.length;
    if (totalErrors === 0) {
      console.log(`\nüéâ PASSO 3 COMPLETO: 100% SEM ERROS!`);
    } else {
      console.log(`\n‚ö†Ô∏è  PASSO 3 COMPLETO COM ${totalErrors} ERROS`);
    }
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    // Verifica√ß√µes
    expect(analyzer.hasCriticalErrors()).toBe(false);
    expect(totalErrors).toBe(0);
    expect(backendCheck.success).toBe(true);
  });
});
